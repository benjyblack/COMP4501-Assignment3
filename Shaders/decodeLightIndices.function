//Note that the lights returned by decode lights are ordered such that if there is
//only one light, it's in lightIndices [0]; if there are 2, it's in [0] and [1], 
//etc. 

//Recall that when a light is drawn, existing bits (WHICH ARE INITIALLY ZERO AND
//REPRESENT LIGHT INDEX 0; I.E., A BLACK LIGHT OR NO LIGHT) are shifted right and 
//the new light bits are stored on the left... Since we process the indices from 
//right to left and store then in lightIndices [i], we ensure that i starts at 3 and 
//decreases to 0 ensuring that the last light processed is in lightIndices [0]...

void decodeLightIndices (vec4 floatLightIndices, out float lightIndices [4]) {	
	//If the pixels were integers, the bits would look as follows 
	//	where red contains the lowest order 2-bits, green the next lowest, then blue, and alpha are the highest order bits...
	//			red			1122 3344; more specifically, the red   version denoted r1r1r2r2 r3r3r4r4
	//			green		1122 3344; more specifically, the green version denoted g1g1g2g2 g3g3g4g4
	//			blue		1122 3344; more specifically, the blue  version denoted b1b1b2b2 b3b3b4b4
	//			alpha		1122 3344; more specifically, the alpha version denoted a1a1a2a2 a3a3a4a4
	
	//So index0 can be recovered by assembling the 1111 1111 bits, specifically a1a1b1b1 g1g1r1r1 in that order.
	//So index1 can be recovered by assembling the 2222 2222 bits, specifically a2a2b2b2 g2g2r2r2 in that order.
	//So index2 can be recovered by assembling the 3333 3333 bits, specifically a3a3b3b3 g3g3r3r3 in that order.
	//So index3 can be recovered by assembling the 4444 4444 bits, specifically a4a4b4b4 g4g4r4r4 in that order.
	
	#if (EXPERIMENT <= 2)
		//Pretend it's always light index 0; i.e., there are no lights...
		lightIndices [0] = lightIndices [1] = lightIndices [2] = lightIndices [3] = 0.0;
		return;
	#else
		//Convert from 0/1 space to 0/255 space. Recall: original color was converted to float by dividing by 255...
		//So here we multiply by slightly more than that and then take the floor...

		floatLightIndices = floor(floatLightIndices*256);
		
		//If the pixels were integers, the bits would look as follows 
		//	where red contains the lowest order 2-bits, green the next lowest, then blue, and alpha are the highest order bits...
		//			red			1122 3344; more specifically, the red   version denoted r1r1r2r2 r3r3r4r4
		//			green		1122 3344; more specifically, the green version denoted g1g1g2g2 g3g3g4g4
		//			blue		1122 3344; more specifically, the blue  version denoted b1b1b2b2 b3b3b4b4
		//			alpha		1122 3344; more specifically, the alpha version denoted a1a1a2a2 a3a3a4a4
		
		//So index0 can be recovered by assembling the 1111 1111 bits, specifically a1a1b1b1 g1g1r1r1 in that order.
		//So index1 can be recovered by assembling the 2222 2222 bits, specifically a2a2b2b2 g2g2r2r2 in that order.
		//So index2 can be recovered by assembling the 3333 3333 bits, specifically a3a3b3b3 g3g3r3r3 in that order.
		//So index3 can be recovered by assembling the 4444 4444 bits, specifically a4a4b4b4 g4g4r4r4 in that order.
		
		for (int i = OVERLAP_LIGHTS-1; i >= 0; i--) {
			//Perform shift right 2 = divide by 4 = multiply by 0.25 and floor to get as close to integers 
			//as possible without modifying the original.
			vec4 small = floor(floatLightIndices*0.25);

			//Extract the 2 rightmost bits by subtracting the large value - the small shifted back left by 2 (multiply by 4)...
			vec4 A = floatLightIndices - (small*4);

			//Assemble the r/g/b/a components into one integer light index via r << 0 + g << 2 + b << 4 + a << 6.
			//Add a small bias 0.1 to ensure it is slightly larger than the integer (we don't want to be slightly less)...
			//For example, if all the bits were 11 (i,e, 3), we get 3+3*4+3*16+3*64 = 3+12+48+192 = 255 => 255.1.
		
			lightIndices[i] = dot(A, vec4(64,16,4,1)) + 0.1;

			//Floor the value to eliminate the fractional part and save it...
			lightIndices[i] = floor(lightIndices[i]);

			//Replace the original integer light indices by the shift right version so we can repeat on the rest...
			floatLightIndices = small;
		}
		return;
	#endif //EXPERIMENT
}
